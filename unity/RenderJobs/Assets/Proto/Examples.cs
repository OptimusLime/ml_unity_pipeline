// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: examples.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from examples.proto</summary>
public static partial class ExamplesReflection {

  #region Descriptor
  /// <summary>File descriptor for examples.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ExamplesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5leGFtcGxlcy5wcm90byIgCghQQ0dQb2ludBIJCgF4GAEgASgCEgkKAXkY",
          "AiABKAIiRQoLUENHVmlld3BvcnQSDAoEeG1pbhgBIAEoAhIMCgR4bWF4GAIg",
          "ASgCEgwKBHltaW4YAyABKAISDAoEeW1heBgEIAEoAiJSCgdQQ0dMZWFmEg4K",
          "Bmxlbmd0aBgBIAEoAhINCgV3aWR0aBgCIAEoAhINCgVhbmdsZRgDIAEoAhIZ",
          "CgZjZW50ZXIYBCABKAsyCS5QQ0dQb2ludCJFCglQQ0dGbG93ZXISGQoGY2Vu",
          "dGVyGAEgASgLMgkuUENHUG9pbnQSDgoGcmFkaXVzGAIgASgCEg0KBWFuZ2xl",
          "GAMgASgCIlsKCVBDR0JyYW5jaBIYCgVzdGFydBgBIAEoCzIJLlBDR1BvaW50",
          "EhYKA2VuZBgCIAEoCzIJLlBDR1BvaW50Eg0KBXdpZHRoGAMgASgCEg0KBWFu",
          "Z2xlGAQgASgCInYKC1BDR1ZpbmVJdGVtEgwKBHR5cGUYASABKAkSCQoBbhgC",
          "IAEoBRIWCgRsZWFmGAMgASgLMgguUENHTGVhZhIaCgZmbG93ZXIYBCABKAsy",
          "Ci5QQ0dGbG93ZXISGgoGYnJhbmNoGAUgASgLMgouUENHQnJhbmNoIqEBCgtQ",
          "Q0dWaW5lVmlldxINCgVkZXB0aBgBIAEoBRIWCgNwb3MYAiABKAsyCS5QQ0dQ",
          "b2ludBINCgV3aWR0aBgDIAEoAhINCgVhbmdsZRgEIAEoAhIQCghpbWdfc2l6",
          "ZRgFIAMoBRIeCgh2aWV3cG9ydBgGIAEoCzIMLlBDR1ZpZXdwb3J0EhsKBXZp",
          "bmVzGAcgAygLMgwuUENHVmluZUl0ZW1iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGPoint), global::PCGPoint.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGViewport), global::PCGViewport.Parser, new[]{ "Xmin", "Xmax", "Ymin", "Ymax" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGLeaf), global::PCGLeaf.Parser, new[]{ "Length", "Width", "Angle", "Center" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGFlower), global::PCGFlower.Parser, new[]{ "Center", "Radius", "Angle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGBranch), global::PCGBranch.Parser, new[]{ "Start", "End", "Width", "Angle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGVineItem), global::PCGVineItem.Parser, new[]{ "Type", "N", "Leaf", "Flower", "Branch" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCGVineView), global::PCGVineView.Parser, new[]{ "Depth", "Pos", "Width", "Angle", "ImgSize", "Viewport", "Vines" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class PCGPoint : pb::IMessage<PCGPoint> {
  private static readonly pb::MessageParser<PCGPoint> _parser = new pb::MessageParser<PCGPoint>(() => new PCGPoint());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGPoint> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGPoint() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGPoint(PCGPoint other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGPoint Clone() {
    return new PCGPoint(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGPoint);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGPoint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGPoint other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PCGViewport : pb::IMessage<PCGViewport> {
  private static readonly pb::MessageParser<PCGViewport> _parser = new pb::MessageParser<PCGViewport>(() => new PCGViewport());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGViewport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGViewport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGViewport(PCGViewport other) : this() {
    xmin_ = other.xmin_;
    xmax_ = other.xmax_;
    ymin_ = other.ymin_;
    ymax_ = other.ymax_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGViewport Clone() {
    return new PCGViewport(this);
  }

  /// <summary>Field number for the "xmin" field.</summary>
  public const int XminFieldNumber = 1;
  private float xmin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Xmin {
    get { return xmin_; }
    set {
      xmin_ = value;
    }
  }

  /// <summary>Field number for the "xmax" field.</summary>
  public const int XmaxFieldNumber = 2;
  private float xmax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Xmax {
    get { return xmax_; }
    set {
      xmax_ = value;
    }
  }

  /// <summary>Field number for the "ymin" field.</summary>
  public const int YminFieldNumber = 3;
  private float ymin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ymin {
    get { return ymin_; }
    set {
      ymin_ = value;
    }
  }

  /// <summary>Field number for the "ymax" field.</summary>
  public const int YmaxFieldNumber = 4;
  private float ymax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ymax {
    get { return ymax_; }
    set {
      ymax_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGViewport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGViewport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xmin, other.Xmin)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xmax, other.Xmax)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ymin, other.Ymin)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ymax, other.Ymax)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Xmin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xmin);
    if (Xmax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xmax);
    if (Ymin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ymin);
    if (Ymax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ymax);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Xmin != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Xmin);
    }
    if (Xmax != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Xmax);
    }
    if (Ymin != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Ymin);
    }
    if (Ymax != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Ymax);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Xmin != 0F) {
      size += 1 + 4;
    }
    if (Xmax != 0F) {
      size += 1 + 4;
    }
    if (Ymin != 0F) {
      size += 1 + 4;
    }
    if (Ymax != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGViewport other) {
    if (other == null) {
      return;
    }
    if (other.Xmin != 0F) {
      Xmin = other.Xmin;
    }
    if (other.Xmax != 0F) {
      Xmax = other.Xmax;
    }
    if (other.Ymin != 0F) {
      Ymin = other.Ymin;
    }
    if (other.Ymax != 0F) {
      Ymax = other.Ymax;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Xmin = input.ReadFloat();
          break;
        }
        case 21: {
          Xmax = input.ReadFloat();
          break;
        }
        case 29: {
          Ymin = input.ReadFloat();
          break;
        }
        case 37: {
          Ymax = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PCGLeaf : pb::IMessage<PCGLeaf> {
  private static readonly pb::MessageParser<PCGLeaf> _parser = new pb::MessageParser<PCGLeaf>(() => new PCGLeaf());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGLeaf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGLeaf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGLeaf(PCGLeaf other) : this() {
    length_ = other.length_;
    width_ = other.width_;
    angle_ = other.angle_;
    Center = other.center_ != null ? other.Center.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGLeaf Clone() {
    return new PCGLeaf(this);
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 1;
  private float length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 2;
  private float width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 3;
  private float angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 4;
  private global::PCGPoint center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGPoint Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGLeaf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGLeaf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
    if (!object.Equals(Center, other.Center)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Length != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
    if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
    if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
    if (center_ != null) hash ^= Center.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Length != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Length);
    }
    if (Width != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Width);
    }
    if (Angle != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Angle);
    }
    if (center_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Center);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Length != 0F) {
      size += 1 + 4;
    }
    if (Width != 0F) {
      size += 1 + 4;
    }
    if (Angle != 0F) {
      size += 1 + 4;
    }
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGLeaf other) {
    if (other == null) {
      return;
    }
    if (other.Length != 0F) {
      Length = other.Length;
    }
    if (other.Width != 0F) {
      Width = other.Width;
    }
    if (other.Angle != 0F) {
      Angle = other.Angle;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        center_ = new global::PCGPoint();
      }
      Center.MergeFrom(other.Center);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Length = input.ReadFloat();
          break;
        }
        case 21: {
          Width = input.ReadFloat();
          break;
        }
        case 29: {
          Angle = input.ReadFloat();
          break;
        }
        case 34: {
          if (center_ == null) {
            center_ = new global::PCGPoint();
          }
          input.ReadMessage(center_);
          break;
        }
      }
    }
  }

}

public sealed partial class PCGFlower : pb::IMessage<PCGFlower> {
  private static readonly pb::MessageParser<PCGFlower> _parser = new pb::MessageParser<PCGFlower>(() => new PCGFlower());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGFlower> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGFlower() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGFlower(PCGFlower other) : this() {
    Center = other.center_ != null ? other.Center.Clone() : null;
    radius_ = other.radius_;
    angle_ = other.angle_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGFlower Clone() {
    return new PCGFlower(this);
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 1;
  private global::PCGPoint center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGPoint Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  /// <summary>Field number for the "radius" field.</summary>
  public const int RadiusFieldNumber = 2;
  private float radius_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Radius {
    get { return radius_; }
    set {
      radius_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 3;
  private float angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGFlower);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGFlower other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Center, other.Center)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (center_ != null) hash ^= Center.GetHashCode();
    if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
    if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (center_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Center);
    }
    if (Radius != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Radius);
    }
    if (Angle != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Angle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    if (Radius != 0F) {
      size += 1 + 4;
    }
    if (Angle != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGFlower other) {
    if (other == null) {
      return;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        center_ = new global::PCGPoint();
      }
      Center.MergeFrom(other.Center);
    }
    if (other.Radius != 0F) {
      Radius = other.Radius;
    }
    if (other.Angle != 0F) {
      Angle = other.Angle;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (center_ == null) {
            center_ = new global::PCGPoint();
          }
          input.ReadMessage(center_);
          break;
        }
        case 21: {
          Radius = input.ReadFloat();
          break;
        }
        case 29: {
          Angle = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PCGBranch : pb::IMessage<PCGBranch> {
  private static readonly pb::MessageParser<PCGBranch> _parser = new pb::MessageParser<PCGBranch>(() => new PCGBranch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGBranch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGBranch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGBranch(PCGBranch other) : this() {
    Start = other.start_ != null ? other.Start.Clone() : null;
    End = other.end_ != null ? other.End.Clone() : null;
    width_ = other.width_;
    angle_ = other.angle_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGBranch Clone() {
    return new PCGBranch(this);
  }

  /// <summary>Field number for the "start" field.</summary>
  public const int StartFieldNumber = 1;
  private global::PCGPoint start_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGPoint Start {
    get { return start_; }
    set {
      start_ = value;
    }
  }

  /// <summary>Field number for the "end" field.</summary>
  public const int EndFieldNumber = 2;
  private global::PCGPoint end_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGPoint End {
    get { return end_; }
    set {
      end_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 3;
  private float width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 4;
  private float angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGBranch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGBranch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Start, other.Start)) return false;
    if (!object.Equals(End, other.End)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (start_ != null) hash ^= Start.GetHashCode();
    if (end_ != null) hash ^= End.GetHashCode();
    if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
    if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (start_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Start);
    }
    if (end_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(End);
    }
    if (Width != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Width);
    }
    if (Angle != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Angle);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (start_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
    }
    if (end_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
    }
    if (Width != 0F) {
      size += 1 + 4;
    }
    if (Angle != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGBranch other) {
    if (other == null) {
      return;
    }
    if (other.start_ != null) {
      if (start_ == null) {
        start_ = new global::PCGPoint();
      }
      Start.MergeFrom(other.Start);
    }
    if (other.end_ != null) {
      if (end_ == null) {
        end_ = new global::PCGPoint();
      }
      End.MergeFrom(other.End);
    }
    if (other.Width != 0F) {
      Width = other.Width;
    }
    if (other.Angle != 0F) {
      Angle = other.Angle;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (start_ == null) {
            start_ = new global::PCGPoint();
          }
          input.ReadMessage(start_);
          break;
        }
        case 18: {
          if (end_ == null) {
            end_ = new global::PCGPoint();
          }
          input.ReadMessage(end_);
          break;
        }
        case 29: {
          Width = input.ReadFloat();
          break;
        }
        case 37: {
          Angle = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PCGVineItem : pb::IMessage<PCGVineItem> {
  private static readonly pb::MessageParser<PCGVineItem> _parser = new pb::MessageParser<PCGVineItem>(() => new PCGVineItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGVineItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGVineItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGVineItem(PCGVineItem other) : this() {
    type_ = other.type_;
    n_ = other.n_;
    Leaf = other.leaf_ != null ? other.Leaf.Clone() : null;
    Flower = other.flower_ != null ? other.Flower.Clone() : null;
    Branch = other.branch_ != null ? other.Branch.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGVineItem Clone() {
    return new PCGVineItem(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "n" field.</summary>
  public const int NFieldNumber = 2;
  private int n_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int N {
    get { return n_; }
    set {
      n_ = value;
    }
  }

  /// <summary>Field number for the "leaf" field.</summary>
  public const int LeafFieldNumber = 3;
  private global::PCGLeaf leaf_;
  /// <summary>
  ///    PCGVineItem next = 2;
  ///    PCGVineItem parent = 3;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGLeaf Leaf {
    get { return leaf_; }
    set {
      leaf_ = value;
    }
  }

  /// <summary>Field number for the "flower" field.</summary>
  public const int FlowerFieldNumber = 4;
  private global::PCGFlower flower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGFlower Flower {
    get { return flower_; }
    set {
      flower_ = value;
    }
  }

  /// <summary>Field number for the "branch" field.</summary>
  public const int BranchFieldNumber = 5;
  private global::PCGBranch branch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGBranch Branch {
    get { return branch_; }
    set {
      branch_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGVineItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGVineItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (N != other.N) return false;
    if (!object.Equals(Leaf, other.Leaf)) return false;
    if (!object.Equals(Flower, other.Flower)) return false;
    if (!object.Equals(Branch, other.Branch)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (N != 0) hash ^= N.GetHashCode();
    if (leaf_ != null) hash ^= Leaf.GetHashCode();
    if (flower_ != null) hash ^= Flower.GetHashCode();
    if (branch_ != null) hash ^= Branch.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Type);
    }
    if (N != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(N);
    }
    if (leaf_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Leaf);
    }
    if (flower_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Flower);
    }
    if (branch_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Branch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (N != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
    }
    if (leaf_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Leaf);
    }
    if (flower_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flower);
    }
    if (branch_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Branch);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGVineItem other) {
    if (other == null) {
      return;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.N != 0) {
      N = other.N;
    }
    if (other.leaf_ != null) {
      if (leaf_ == null) {
        leaf_ = new global::PCGLeaf();
      }
      Leaf.MergeFrom(other.Leaf);
    }
    if (other.flower_ != null) {
      if (flower_ == null) {
        flower_ = new global::PCGFlower();
      }
      Flower.MergeFrom(other.Flower);
    }
    if (other.branch_ != null) {
      if (branch_ == null) {
        branch_ = new global::PCGBranch();
      }
      Branch.MergeFrom(other.Branch);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Type = input.ReadString();
          break;
        }
        case 16: {
          N = input.ReadInt32();
          break;
        }
        case 26: {
          if (leaf_ == null) {
            leaf_ = new global::PCGLeaf();
          }
          input.ReadMessage(leaf_);
          break;
        }
        case 34: {
          if (flower_ == null) {
            flower_ = new global::PCGFlower();
          }
          input.ReadMessage(flower_);
          break;
        }
        case 42: {
          if (branch_ == null) {
            branch_ = new global::PCGBranch();
          }
          input.ReadMessage(branch_);
          break;
        }
      }
    }
  }

}

public sealed partial class PCGVineView : pb::IMessage<PCGVineView> {
  private static readonly pb::MessageParser<PCGVineView> _parser = new pb::MessageParser<PCGVineView>(() => new PCGVineView());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCGVineView> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ExamplesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGVineView() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGVineView(PCGVineView other) : this() {
    depth_ = other.depth_;
    Pos = other.pos_ != null ? other.Pos.Clone() : null;
    width_ = other.width_;
    angle_ = other.angle_;
    imgSize_ = other.imgSize_.Clone();
    Viewport = other.viewport_ != null ? other.Viewport.Clone() : null;
    vines_ = other.vines_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCGVineView Clone() {
    return new PCGVineView(this);
  }

  /// <summary>Field number for the "depth" field.</summary>
  public const int DepthFieldNumber = 1;
  private int depth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Depth {
    get { return depth_; }
    set {
      depth_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 2;
  private global::PCGPoint pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGPoint Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 3;
  private float width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 4;
  private float angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "img_size" field.</summary>
  public const int ImgSizeFieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_imgSize_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> imgSize_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ImgSize {
    get { return imgSize_; }
  }

  /// <summary>Field number for the "viewport" field.</summary>
  public const int ViewportFieldNumber = 6;
  private global::PCGViewport viewport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PCGViewport Viewport {
    get { return viewport_; }
    set {
      viewport_ = value;
    }
  }

  /// <summary>Field number for the "vines" field.</summary>
  public const int VinesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PCGVineItem> _repeated_vines_codec
      = pb::FieldCodec.ForMessage(58, global::PCGVineItem.Parser);
  private readonly pbc::RepeatedField<global::PCGVineItem> vines_ = new pbc::RepeatedField<global::PCGVineItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PCGVineItem> Vines {
    get { return vines_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCGVineView);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCGVineView other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Depth != other.Depth) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
    if(!imgSize_.Equals(other.imgSize_)) return false;
    if (!object.Equals(Viewport, other.Viewport)) return false;
    if(!vines_.Equals(other.vines_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Depth != 0) hash ^= Depth.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
    if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
    hash ^= imgSize_.GetHashCode();
    if (viewport_ != null) hash ^= Viewport.GetHashCode();
    hash ^= vines_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Depth != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Depth);
    }
    if (pos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Pos);
    }
    if (Width != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Width);
    }
    if (Angle != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Angle);
    }
    imgSize_.WriteTo(output, _repeated_imgSize_codec);
    if (viewport_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Viewport);
    }
    vines_.WriteTo(output, _repeated_vines_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Depth != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Depth);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (Width != 0F) {
      size += 1 + 4;
    }
    if (Angle != 0F) {
      size += 1 + 4;
    }
    size += imgSize_.CalculateSize(_repeated_imgSize_codec);
    if (viewport_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Viewport);
    }
    size += vines_.CalculateSize(_repeated_vines_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCGVineView other) {
    if (other == null) {
      return;
    }
    if (other.Depth != 0) {
      Depth = other.Depth;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        pos_ = new global::PCGPoint();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.Width != 0F) {
      Width = other.Width;
    }
    if (other.Angle != 0F) {
      Angle = other.Angle;
    }
    imgSize_.Add(other.imgSize_);
    if (other.viewport_ != null) {
      if (viewport_ == null) {
        viewport_ = new global::PCGViewport();
      }
      Viewport.MergeFrom(other.Viewport);
    }
    vines_.Add(other.vines_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Depth = input.ReadInt32();
          break;
        }
        case 18: {
          if (pos_ == null) {
            pos_ = new global::PCGPoint();
          }
          input.ReadMessage(pos_);
          break;
        }
        case 29: {
          Width = input.ReadFloat();
          break;
        }
        case 37: {
          Angle = input.ReadFloat();
          break;
        }
        case 42:
        case 40: {
          imgSize_.AddEntriesFrom(input, _repeated_imgSize_codec);
          break;
        }
        case 50: {
          if (viewport_ == null) {
            viewport_ = new global::PCGViewport();
          }
          input.ReadMessage(viewport_);
          break;
        }
        case 58: {
          vines_.AddEntriesFrom(input, _repeated_vines_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
